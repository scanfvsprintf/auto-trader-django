"""
Django settings for autoTrade project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dotenv
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
dotenv.load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!

SECRET_KEY = os.getenv('SECRET_KEY', 'default-secret-key-for-dev')
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
DEBUG = (ENVIRONMENT == 'development')
if ENVIRONMENT == 'production':
    # 请将 'your_domain.com' 和服务器的公网/内网IP填入
    ALLOWED_HOSTS = ['your_domain.com', '1.15.100.196', '10.0.4.15','10.0.12.10']
else:
    ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'data_manager',
    'selection_manager',
    'trade_manager',
    'common'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'autoTrade.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'autoTrade.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'maindb'),
        'USER': os.getenv('DB_USER', 'xyx'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'xyx123'),
        'HOST': os.getenv('DB_HOST', 'localhost'), # 默认使用 localhost
        'PORT': os.getenv('DB_PORT', '5432'),
        'OPTIONS': {
            'keepalives': 1,
            'keepalives_idle': 60,
            'keepalives_interval': 10,
            'keepalives_count': 6,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 不要禁用已存在的日志器，否则 Django 自带的日志会失效
    
    # 1. 定义日志格式
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    
    # 2. 定义处理器 (日志去哪里)
    'handlers': {
        # 输出到控制台
        'console': {
            'level': 'DEBUG',  # 处理 DEBUG 及以上级别的日志
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # 使用 verbose 格式
        },
        # 输出到文件
        'file': {
            'level': 'DEBUG',  # 处理 INFO 及以上级别的日志
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'), # 日志文件路径
            'maxBytes': 1024 * 1024 * 10,  # 5 MB
            'backupCount': 5, # 最多保留 5 个备份文件
            'formatter': 'verbose', # 使用 verbose 格式
        },
    },
    
    # 3. 定义记录器 (哪些日志需要处理)
    'loggers': {
        # Django 框架自身的日志
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        # 你自己应用的日志
        'data_manager': { # 这里使用你的 app 名称
            'handlers': ['console','file'],
            'level': 'DEBUG', # 在开发时设为 DEBUG，可以看到所有信息
            'propagate': False, # 不向上传递给 root logger
        },
        'selection_manager': { # 这里使用你的 app 名称
            'handlers': ['console','file'],
            'level': 'DEBUG', # 在开发时设为 DEBUG，可以看到所有信息
            'propagate': False, # 不向上传递给 root logger
        },
        'trade_manager': { # 这里使用你的 app 名称
            'handlers': ['console','file'],
            'level': 'DEBUG', # 在开发时设为 DEBUG，可以看到所有信息
            'propagate': False, # 不向上传递给 root logger
        },
        # 你可以为任何模块定义 logger
        'common': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # --- 新增日志清理配置 ---
        'sqlalchemy.engine': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # <-- 只显示 WARNING 及以上级别的日志，过滤掉SQL语句
            'propagate': False,
        },
        'psycopg2': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # <-- 过滤掉 psycopg2 的低级别日志
            'propagate': False,
        },
        'apscheduler': {
            'handlers': ['console', 'file'],
            'level': 'WARNING', # <-- 过滤掉 apscheduler 的 INFO 日志
            'propagate': False,
        }

    }
}
 
# 确保 logs 目录存在
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)